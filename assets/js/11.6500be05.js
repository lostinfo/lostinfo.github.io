(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{64:function(e,r,s){"use strict";s.r(r);var n=s(0),t=Object(n.a)({},(function(){var e=this,r=e.$createElement,s=e._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[s("img",{attrs:{src:"https://cdn.learnku.com/uploads/images/201801/12/1/n6lcw6dO6I.png",alt:""}})]),e._v(" "),s("p",[e._v("我最近在 Laravel Brasil 社区看到一个"),s("a",{attrs:{href:"https://github.com/laravelbrasil/forum/issues/140",target:"_blank",rel:"noopener noreferrer"}},[e._v("问题"),s("OutboundLink")],1),e._v("，结果比看起来更有趣。想象一下你有一个 "),s("code",[e._v("UsersResource")]),e._v(" 用下面的实现：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\Resource;\nclass UsersResource extends Resource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email\n        ];\n    }\n}\n")])])]),e._v(" "),s("p",[e._v("出于某种原因，您可能希望在另一个端点上重新使用该资源类，但隐藏 "),s("code",[e._v("email")]),e._v(" 字段。这篇文章就是告诉你如何实现这一点的。"),s("br"),e._v("\n如果你不知道  "),s("code",[e._v("API Resources")]),e._v(" 是什么，请查看我之前关于这个的文章。")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://hackernoon.com/first-impressions-on-laravel-api-resources-4869b73b7847",target:"_blank",rel:"noopener noreferrer"}},[e._v("First Impression on API Resources"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://hackernoon.com/reusable-api-resource-with-nested-relationship-laravel-5-5-c654c7243869",target:"_blank",rel:"noopener noreferrer"}},[e._v("API Resources with Nested Relationship"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"初始化项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化项目"}},[e._v("#")]),e._v(" 初始化项目")]),e._v(" "),s("p",[s("em",[e._v("有趣的东西从第 3 节开始.")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("composer create-project --prefer-dist laravel/laravel api-fields\ncd api-fields\ntouch database/database.sqlite\n")])])]),s("p",[e._v("编辑"),s("code",[e._v(".env")]),e._v(" 文件，删除数据库设置并使用 SQLite")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("DB_CONNECTION=sqlite\n")])])]),s("p",[e._v("继续设置项目")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("php artisan migrate\nphp artisan make:resource UsersResource\nphp artisan make:resource --collection UsersResourceCollection \nphp artisan make:controller UsersController\nphp artisan tinker\nfactory(App\\User::class)->times(20)->create();\nquit\n")])])]),s("h2",{attrs:{id:"路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),s("p",[e._v("确保在 "),s("code",[e._v("api.php")]),e._v(" 文件中创建一个路由。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Route::apiResource('/users', 'UsersController');\n")])])]),s("h2",{attrs:{id:"控制器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#控制器"}},[e._v("#")]),e._v(" 控制器")]),e._v(" "),s("p",[e._v("控制器代表了期望的目标。在这个例子中，让我们假设在用户列表中，我们只想要所有用户的名字，而在用户显示中，我们只想隐藏电子邮件地址。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<?php\nnamespace App\\Http\\Controllers;\nuse App\\Http\\Resources\\UsersResource;\nuse App\\User;\nclass UsersController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @param User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(User $user)\n    {\n        return UsersResource::collection($user->paginate())->hide(['id', 'email']);\n    }\n    /**\n     * Display a user.\n     *\n     * @param User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(User $user)\n    {\n        return UsersResource::make($user)->hide(['id']);\n    }\n}\n")])])]),s("p",[e._v("为了达到这个目的，我们需要 "),s("code",[e._v("UsersResourceCollection")]),e._v(" 和 "),s("code",[e._v("UsersResource")]),e._v(" 同时知道如何处理  "),s("code",[e._v("hide")]),e._v(" 调用。")]),e._v(" "),s("h2",{attrs:{id:"usersresource-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usersresource-类"}},[e._v("#")]),e._v(" UsersResource 类")]),e._v(" "),s("p",[e._v("让我们从  "),s("code",[e._v("show")]),e._v(" 方法开始.  "),s("code",[e._v("UsersResource::make")]),e._v(" 将会返回  "),s("code",[e._v("UsersResource")]),e._v(" 的对象。因此，我们应该揭开  "),s("code",[e._v("hide")]),e._v(" 的神秘面纱，它可以存储我们期望从响应中移除的键.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\Resource;\nclass UsersResource extends Resource\n{\n    /**\n     * @var array\n     */\n    protected $withoutFields = [];\n\n     /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return $this->filterFields([\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email\n        ]);\n    }\n    /**\n     * Set the keys that are supposed to be filtered out.\n     *\n     * @param array $fields\n     * @return $this\n     */\n    public function hide(array $fields)\n    {\n        $this->withoutFields = $fields;\n        return $this;\n    }\n    /**\n     * Remove the filtered keys.\n     *\n     * @param $array\n     * @return array\n     */\n    protected function filterFields($array)\n    {\n        return collect($array)->forget($this->withoutFields)->toArray();\n    }\n}\n")])])]),s("p",[e._v("大功告成！现在我们可以访问 "),s("code",[e._v("http://api.dev/api/users/1")]),e._v(" ，你会发现响应中已经没有 "),s("code",[e._v("id")]),e._v(" 字段了。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n "data": {\n  "name": "Mr. Frederik Morar",\n  "email": "darryl.wilkinson@example.org"\n }\n}\n')])])]),s("h2",{attrs:{id:"usersresourcecollection-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usersresourcecollection-类"}},[e._v("#")]),e._v(" UsersResourceCollection 类")]),e._v(" "),s("p",[e._v("执行项目集合中的 "),s("code",[e._v("index")]),e._v(" 方法，我们需要作出如下修改:")]),e._v(" "),s("ul",[s("li",[e._v("(1) 确保  "),s("code",[e._v("UsersResource::collection")]),e._v(" 返回 "),s("code",[e._v("UsersResourceCollection")]),e._v(" 实例")]),e._v(" "),s("li",[e._v("(2)  在  "),s("code",[e._v("UsersResourceCollection")]),e._v(" 上公开 "),s("code",[e._v("hide")]),e._v(" 方法")]),e._v(" "),s("li",[e._v("(3) 将隐藏的字段传递给  "),s("code",[e._v("UsersResource")])])]),e._v(" "),s("p",[e._v("关于 (1), 我们只需要重写  "),s("code",[e._v("UsersResource")]),e._v(" 中的 "),s("code",[e._v("collection")]),e._v(" 方法")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\Resource;\nclass UsersResource extends Resource\n{\n    public static function collection($resource)\n    {\n        return tap(new UsersResourceCollection($resource), function ($collection) {\n            $collection->collects = __CLASS__;\n        });\n    }\n\n    /**\n     * @var array\n     */\n    protected $withoutFields = [];\n    /**\n     * Transform the resource into an array.\n     * 将资源转换为一个数组\n     * \n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return $this->filterFields([\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email\n        ]);\n    }\n    /**\n     * Set the keys that are supposed to be filtered out.\n     *  设置需要隐藏过滤掉的键\n     *  \n     * @param array $fields\n     * @return $this\n     */\n    public function hide(array $fields)\n    {\n        $this->withoutFields = $fields;\n        return $this;\n    }\n    /**\n     * Remove the filtered keys.\n     * 删除隐藏的键\n     * \n     * @param $array\n     * @return array\n     */\n    protected function filterFields($array)\n    {\n        return collect($array)->forget($this->withoutFields)->toArray();\n    }\n}\n")])])]),s("p",[e._v("关于 (2) 和 (3) 我们需要修改 "),s("code",[e._v("UsersResourceCollection")]),e._v(" 文件。让我们公开 "),s("code",[e._v("hide")]),e._v(" 方法并使用隐藏字段处理集合。.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\nclass UsersResourceCollection extends ResourceCollection\n{\n    /**\n     * @var array\n     */\n    protected $withoutFields = [];\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return $this->processCollection($request);\n    }\n    public function hide(array $fields)\n    {\n        $this->withoutFields = $fields;\n        return $this;\n    }\n    /**\n     * Send fields to hide to UsersResource while processing the collection.\n     *  将隐藏字段通过 UsersResource 处理集合\n     * \n     * @param $request\n     * @return array\n     */\n    protected function processCollection($request)\n    {\n        return $this->collection->map(function (UsersResource $resource) use ($request) {\n            return $resource->hide($this->withoutFields)->toArray($request);\n        })->all();\n    }\n}\n")])])]),s("p",[e._v("就是这么简单！现在我们访问 "),s("code",[e._v("http://api.dev/api/users")]),e._v("  看到返回结果中没有了 "),s("code",[e._v("id")]),e._v(" 和 "),s("code",[e._v("email")]),e._v(" 字段了如在 "),s("code",[e._v("UsersController")]),e._v(" 中的指定方法 .")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n "data": [{\n  "name": "Mr. Frederik Morar"\n }, {\n  "name": "Angel Daniel"\n }, {\n  "name": "Brianne Mueller"\n }],\n "links": {\n  "first": "http://lab.php71/api-fields-2/public/api/users?page=1",\n  "last": "http://lab.php71/api-fields-2/public/api/users?page=7",\n  "prev": null,\n  "next": "http://lab.php71/api-fields-2/public/api/users?page=2"\n },\n "meta": {\n  "current_page": 1,\n  "from": 1,\n  "last_page": 7,\n  "path": "http://api-fields.lab.php71/api/users",\n  "per_page": 3,\n  "to": 3,\n  "total": 20\n }\n}\n')])])]),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),s("p",[e._v("本文目标是让 "),s("code",[e._v("Resource")]),e._v(" 类通过隐藏一些在其他接口允许暴露的字段从而变得更加灵活。例如当我们请求 "),s("code",[e._v("/users")]),e._v(" 接口时响应的数据是不包含 "),s("code",[e._v("avatar")]),e._v(" 字段的，但是当请求 "),s("code",[e._v("/users/99")]),e._v(" 时响应的数据里包含 "),s("code",[e._v("avatar")]),e._v(" 字段。")]),e._v(" "),s("p",[e._v("我不推荐过度重复去请求 API 资源，因为它很可能会把简单的事情变得更加复杂，所以说在请求的时候隐藏某些特定的字段是更简单、更合理的解决方案。")])])}),[],!1,null,null,null);r.default=t.exports}}]);